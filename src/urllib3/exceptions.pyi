from typing import Any, Optional, Union, Tuple

class HTTPError(Exception): ...
class HTTPWarning(Warning): ...

class PoolError(HTTPError):
    pool: Any
    def __init__(self, pool: Any, message: str) -> None: ...
    def __reduce__(self) -> Union[str, Tuple[Any, ...]]: ...

class RequestError(PoolError):
    url: Any
    def __init__(self, pool: Any, url: str, message: str) -> None: ...
    def __reduce__(self) -> Union[str, Tuple[Any, ...]]: ...

class SSLError(HTTPError): ...
class ProxyError(HTTPError): ...
class DecodeError(HTTPError): ...
class ProtocolError(HTTPError): ...

ConnectionError: Any

class MaxRetryError(RequestError):
    reason: Any
    def __init__(self, pool: Any, url: str, reason=Optional[str]) -> None: ...  # type: ignore

class HostChangedError(RequestError):
    retries: Any
    def __init__(self, pool: Any, url: str, retries=int) -> None: ...  # type: ignore

class TimeoutStateError(HTTPError): ...
class TimeoutError(HTTPError): ...
class ReadTimeoutError(TimeoutError, RequestError): ...
class ConnectTimeoutError(TimeoutError): ...
class EmptyPoolError(PoolError): ...
class ClosedPoolError(PoolError): ...
class LocationValueError(ValueError, HTTPError): ...

class LocationParseError(LocationValueError):
    location: Any
    def __init__(self, location: str) -> None: ...

class ResponseError(HTTPError):
    GENERIC_ERROR: Any
    SPECIFIC_ERROR: Any

class SecurityWarning(HTTPWarning): ...
class InsecureRequestWarning(SecurityWarning): ...
class SystemTimeWarning(SecurityWarning): ...
class InsecurePlatformWarning(SecurityWarning): ...
